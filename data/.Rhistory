View(sim_data)
form <- readRDS("../models/final_FGR_clean.rds")$form
form
# load model object to get coefficients
coefs <- readRDS("../models/final_FGR_clean.rds")$crrFit$coef
form <- readRDS("../models/final_FGR_clean.rds")$form
set.seed(99)
n <- 1000  # number of dummy observations
# Example covariates
dummy_data <- data.frame(
age = rnorm(n, mean = 80, sd = 15),
sex_f = as.logical(rbinom(n, size = 1, prob = 0.5)),
elective_adm = as.logical(rbinom(n, size = 1, prob = 0.05))
)
# Ensure the column order matches the order in coefs
X <- model.matrix(~ update.formula(form, ~ .), data = dummy_data)[, -1]  # remove intercept
# Ensure the column order matches the order in coefs
X <- model.matrix(update.formula(form, ~ .), data = dummy_data)[, -1]  # remove intercept
library(prodlim)
# Ensure the column order matches the order in coefs
X <- model.matrix(update.formula(form, ~ .), data = dummy_data)[, -1]  # remove intercept
library(survival)
# Ensure the column order matches the order in coefs
X <- model.matrix(update.formula(form, ~ .), data = dummy_data)[, -1]  # remove intercept
library(riskRegression)
# Ensure the column order matches the order in coefs
X <- model.matrix(update.formula(form, ~ .), data = dummy_data)[, -1]  # remove intercept
form
update.formula(form, ~ .)
as.formula(form, rhs = TRUE, lhs = FALSE)
attr(terms(form), "term.labels")
# Example covariates
dummy_data <- Rgemini::dummy_ipadmdad(n = 1000, n_hospitals = 10)
View(dummy_data)
coefs
# Example covariates
dummy_data <- data.frame(
patient_id = seq(1, n, 1),
age = rnorm(n, mean = 70, sd = 15),
sex_f = as.logical(rbinom(n, size = 1, prob = 0.5)),
elective_adm = as.logical(rbinom(n, size = 1, prob = 0.02)),
homelessness = as.logical(rbinom(n, size = 1, prob = 0.005)),
peripheral_AD = as.logical(rbinom(n, size = 1, prob = 0.01)),
coronary_AD = as.logical(rbinom(n, size = 1, prob = 0.12)),
stroke = as.logical(rbinom(n, size = 1, prob = 0.05)),
CHF = as.logical(rbinom(n, size = 1, prob = 0.13)),
hypertension = as.logical(rbinom(n, size = 1, prob = 0.45)),
COPD = as.logical(rbinom(n, size = 1, prob = 0.06)),
CKD = as.logical(rbinom(n, size = 1, prob = 0.04)),
malignancy = as.logical(rbinom(n, size = 1, prob = 0.11)),
mental_illness = as.logical(rbinom(n, size = 1, prob = 0.07)),
creatinine = rnorm(n, mean = 80, sd = 15),
Hb_A1C = rnorm(n, mean = 7.4, sd = 1.5),
albumin = rnorm(n, mean = 30, sd = 10)
)
# load model object to get coefficients
coefs <- readRDS("../models/final_FGR_clean.rds")$crrFit$coef
form <- readRDS("../models/final_FGR_clean.rds")$form
form
form <- readRDS("../models/final_FGR_clean.rds")$form
print(form)
form <- readRDS("../models/final_FGR_clean.rds")$form
knitr::opts_chunk$set(
echo = TRUE, warning = FALSE, message = FALSE
)
## load model objects
FGR <- readRDS("models/final_FGR_clean.rds") # Fine-Gray Regression
names(FGR)
## load model objects
FGR <- readRDS("models/final_FGR_clean.rds") # Fine-Gray Regression
names(FGR)
## load model objects
FGR <- readRDS("models/final_FGR_clean.rds") # Fine-Gray Regression
## load model objects
names(FGR)
## load model objects
FGR <- readRDS("models/final_FGR_clean.rds") # Fine-Gray Regression
names(FGR)
# load model object to get coefficients
coefs <- readRDS("../models/final_FGR_clean.rds")$crrFit$coef
form <- readRDS("../models/final_FGR_clean.rds")$form
print(form)
library(prodlim)
library(survival)
library(riskRegression)
# load model object to get coefficients
coefs <- readRDS("../models/final_FGR_clean.rds")$crrFit$coef
form <- readRDS("../models/final_FGR_clean.rds")$form
set.seed(99)
n <- 1000  # number of dummy observations
# Example covariates
dummy_data <- data.frame(
patient_id = seq(1, n, 1),
age = rnorm(n, mean = 70, sd = 15),
sex_f = as.logical(rbinom(n, size = 1, prob = 0.5)),
elective_adm = as.logical(rbinom(n, size = 1, prob = 0.02)),
homelessness = as.logical(rbinom(n, size = 1, prob = 0.005)),
peripheral_AD = as.logical(rbinom(n, size = 1, prob = 0.01)),
coronary_AD = as.logical(rbinom(n, size = 1, prob = 0.12)),
stroke = as.logical(rbinom(n, size = 1, prob = 0.05)),
CHF = as.logical(rbinom(n, size = 1, prob = 0.13)),
hypertension = as.logical(rbinom(n, size = 1, prob = 0.45)),
COPD = as.logical(rbinom(n, size = 1, prob = 0.06)),
CKD = as.logical(rbinom(n, size = 1, prob = 0.04)),
malignancy = as.logical(rbinom(n, size = 1, prob = 0.11)),
mental_illness = as.logical(rbinom(n, size = 1, prob = 0.07)),
creatinine = rnorm(n, mean = 80, sd = 15),
Hb_A1C = rnorm(n, mean = 7.4, sd = 1.5),
albumin = rnorm(n, mean = 30, sd = 10),
Hb_A1C_missing = as.logical(rbinom(n, size = 1, prob = 0.6)),
creatinine_missing = as.logical(rbinom(n, size = 1, prob = 0.07)),
albumin_missing = as.logical(rbinom(n, size = 1, prob = 0.02))
)
# for entries with missing lab data, set lab result to 0 (according to imputation method)
dummy_data[Hb_A1C_missing == TRUE, ]$Hb_A1C <- 0
dummy_data[creatinine_missing == TRUE, ]$creatinine <- 0
dummy_data[albumin_missing == TRUE, ]$albumin <- 0
library(data.table)
# Example covariates
dummy_data <- data.table(
patient_id = seq(1, n, 1),
age = rnorm(n, mean = 70, sd = 15),
sex_f = as.logical(rbinom(n, size = 1, prob = 0.5)),
elective_adm = as.logical(rbinom(n, size = 1, prob = 0.02)),
homelessness = as.logical(rbinom(n, size = 1, prob = 0.005)),
peripheral_AD = as.logical(rbinom(n, size = 1, prob = 0.01)),
coronary_AD = as.logical(rbinom(n, size = 1, prob = 0.12)),
stroke = as.logical(rbinom(n, size = 1, prob = 0.05)),
CHF = as.logical(rbinom(n, size = 1, prob = 0.13)),
hypertension = as.logical(rbinom(n, size = 1, prob = 0.45)),
COPD = as.logical(rbinom(n, size = 1, prob = 0.06)),
CKD = as.logical(rbinom(n, size = 1, prob = 0.04)),
malignancy = as.logical(rbinom(n, size = 1, prob = 0.11)),
mental_illness = as.logical(rbinom(n, size = 1, prob = 0.07)),
creatinine = rnorm(n, mean = 80, sd = 15),
Hb_A1C = rnorm(n, mean = 7.4, sd = 1.5),
albumin = rnorm(n, mean = 30, sd = 10),
Hb_A1C_missing = as.logical(rbinom(n, size = 1, prob = 0.6)),
creatinine_missing = as.logical(rbinom(n, size = 1, prob = 0.07)),
albumin_missing = as.logical(rbinom(n, size = 1, prob = 0.02))
)
# for entries with missing lab data, set lab result to 0 (according to imputation method)
dummy_data[Hb_A1C_missing == TRUE, Hb_A1C := 0]
dummy_data[creatinine_missing == TRUE, creatinine := 0]
dummy_data[albumin_missing == TRUE, =albumin := 0]
dummy_data[albumin_missing == TRUE, albumin := 0]
install.packages("truncnorm")
library(truncnorm)
# Example covariates
dummy_data <- data.table(
patient_id = seq(1, n, 1),
age = rtruncnorm(n = n, a = 18, b = 105, mean = 70, sd = 15),
sex_f = as.logical(rbinom(n, size = 1, prob = 0.5)),
elective_adm = as.logical(rbinom(n, size = 1, prob = 0.02)),
homelessness = as.logical(rbinom(n, size = 1, prob = 0.005)),
peripheral_AD = as.logical(rbinom(n, size = 1, prob = 0.01)),
coronary_AD = as.logical(rbinom(n, size = 1, prob = 0.12)),
stroke = as.logical(rbinom(n, size = 1, prob = 0.05)),
CHF = as.logical(rbinom(n, size = 1, prob = 0.13)),
hypertension = as.logical(rbinom(n, size = 1, prob = 0.45)),
COPD = as.logical(rbinom(n, size = 1, prob = 0.06)),
CKD = as.logical(rbinom(n, size = 1, prob = 0.04)),
malignancy = as.logical(rbinom(n, size = 1, prob = 0.11)),
mental_illness = as.logical(rbinom(n, size = 1, prob = 0.07)),
creatinine = rnorm(n, mean = 80, sd = 15),
Hb_A1C = rnorm(n, mean = 7.4, sd = 1.5),
albumin = rnorm(n, mean = 30, sd = 10),
Hb_A1C_missing = as.logical(rbinom(n, size = 1, prob = 0.6)),
creatinine_missing = as.logical(rbinom(n, size = 1, prob = 0.07)),
albumin_missing = as.logical(rbinom(n, size = 1, prob = 0.02))
)
min(dummy_data$age)
# Example covariates
dummy_data <- data.table(
patient_id = seq(1, n, 1),
age = rtruncnorm(n = n, a = 18, b = 105, mean = 70, sd = 15),
sex_f = as.logical(rbinom(n, size = 1, prob = 0.5)),
elective_adm = as.logical(rbinom(n, size = 1, prob = 0.02)),
homelessness = as.logical(rbinom(n, size = 1, prob = 0.005)),
peripheral_AD = as.logical(rbinom(n, size = 1, prob = 0.01)),
coronary_AD = as.logical(rbinom(n, size = 1, prob = 0.12)),
stroke = as.logical(rbinom(n, size = 1, prob = 0.05)),
CHF = as.logical(rbinom(n, size = 1, prob = 0.13)),
hypertension = as.logical(rbinom(n, size = 1, prob = 0.45)),
COPD = as.logical(rbinom(n, size = 1, prob = 0.06)),
CKD = as.logical(rbinom(n, size = 1, prob = 0.04)),
malignancy = as.logical(rbinom(n, size = 1, prob = 0.11)),
mental_illness = as.logical(rbinom(n, size = 1, prob = 0.07)),
creatinine = rtruncnorm(n = n, a = 1, b = 1000, mean = 30, sd = 20),
Hb_A1C = rtruncnorm(n = n, a = 5, b = 15, mean = 7.4, sd = 2),
albumin = rtruncnorm(n = n, a = 10, b = 100, mean = 30, sd = 10),
Hb_A1C_missing = as.logical(rbinom(n, size = 1, prob = 0.6)),
creatinine_missing = as.logical(rbinom(n, size = 1, prob = 0.07)),
albumin_missing = as.logical(rbinom(n, size = 1, prob = 0.02))
)
# for entries with missing lab data, set lab result to 0 (according to imputation method)
dummy_data[Hb_A1C_missing == TRUE, Hb_A1C := 0]
dummy_data[creatinine_missing == TRUE, creatinine := 0]
dummy_data[albumin_missing == TRUE, albumin := 0]
attr(terms(form), "term.labels")
# load model object
FGR <- readRDS("../models/final_FGR_clean.rds")
# load model object
FGR <- readRDS("../models/final_FGR_clean.rds")
coefs <- FGR$crrFit$coef
set.seed(99)
n <- 1000  # number of dummy observations
# Example covariates
dummy_data <- data.table(
patient_id = seq(1, n, 1),
age = rtruncnorm(n = n, a = 18, b = 105, mean = 70, sd = 15),
sex_f = as.logical(rbinom(n, size = 1, prob = 0.5)),
elective_adm = as.logical(rbinom(n, size = 1, prob = 0.02)),
homelessness = as.logical(rbinom(n, size = 1, prob = 0.005)),
peripheral_AD = as.logical(rbinom(n, size = 1, prob = 0.01)),
coronary_AD = as.logical(rbinom(n, size = 1, prob = 0.12)),
stroke = as.logical(rbinom(n, size = 1, prob = 0.05)),
CHF = as.logical(rbinom(n, size = 1, prob = 0.13)),
hypertension = as.logical(rbinom(n, size = 1, prob = 0.45)),
COPD = as.logical(rbinom(n, size = 1, prob = 0.06)),
CKD = as.logical(rbinom(n, size = 1, prob = 0.04)),
malignancy = as.logical(rbinom(n, size = 1, prob = 0.11)),
mental_illness = as.logical(rbinom(n, size = 1, prob = 0.07)),
creatinine = rtruncnorm(n = n, a = 1, b = 1000, mean = 30, sd = 20),
Hb_A1C = rtruncnorm(n = n, a = 5, b = 15, mean = 7.4, sd = 2),
albumin = rtruncnorm(n = n, a = 10, b = 100, mean = 30, sd = 10),
Hb_A1C_missing = as.logical(rbinom(n, size = 1, prob = 0.6)),
creatinine_missing = as.logical(rbinom(n, size = 1, prob = 0.07)),
albumin_missing = as.logical(rbinom(n, size = 1, prob = 0.02))
)
# for entries with missing lab data, set lab result to 0 (according to imputation method)
dummy_data[Hb_A1C_missing == TRUE, Hb_A1C := 0]
dummy_data[creatinine_missing == TRUE, creatinine := 0]
dummy_data[albumin_missing == TRUE, albumin := 0]
# add non-linear components
age_splines <- rcs(dummy_data$age, FGR$splines$age_knots)
creatinine_splines <- rcs(dummy_data$creatinine, FGR$splines$creatinine_knots)
Hb_A1C_splines <- rcs(dummy_data$Hb_A1C, FGR$splines$hba1c_knots)
library(rms)
# load model object
FGR <- readRDS("../models/final_FGR_clean.rds")
coefs <- FGR$crrFit$coef
set.seed(99)
n <- 1000  # number of dummy observations
# Example covariates
dummy_data <- data.table(
patient_id = seq(1, n, 1),
age = rtruncnorm(n = n, a = 18, b = 105, mean = 70, sd = 15),
sex_f = as.logical(rbinom(n, size = 1, prob = 0.5)),
elective_adm = as.logical(rbinom(n, size = 1, prob = 0.02)),
homelessness = as.logical(rbinom(n, size = 1, prob = 0.005)),
peripheral_AD = as.logical(rbinom(n, size = 1, prob = 0.01)),
coronary_AD = as.logical(rbinom(n, size = 1, prob = 0.12)),
stroke = as.logical(rbinom(n, size = 1, prob = 0.05)),
CHF = as.logical(rbinom(n, size = 1, prob = 0.13)),
hypertension = as.logical(rbinom(n, size = 1, prob = 0.45)),
COPD = as.logical(rbinom(n, size = 1, prob = 0.06)),
CKD = as.logical(rbinom(n, size = 1, prob = 0.04)),
malignancy = as.logical(rbinom(n, size = 1, prob = 0.11)),
mental_illness = as.logical(rbinom(n, size = 1, prob = 0.07)),
creatinine = rtruncnorm(n = n, a = 1, b = 1000, mean = 30, sd = 20),
Hb_A1C = rtruncnorm(n = n, a = 5, b = 15, mean = 7.4, sd = 2),
albumin = rtruncnorm(n = n, a = 10, b = 100, mean = 30, sd = 10),
Hb_A1C_missing = as.logical(rbinom(n, size = 1, prob = 0.6)),
creatinine_missing = as.logical(rbinom(n, size = 1, prob = 0.07)),
albumin_missing = as.logical(rbinom(n, size = 1, prob = 0.02))
)
# for entries with missing lab data, set lab result to 0 (according to imputation method)
dummy_data[Hb_A1C_missing == TRUE, Hb_A1C := 0]
dummy_data[creatinine_missing == TRUE, creatinine := 0]
dummy_data[albumin_missing == TRUE, albumin := 0]
# add non-linear components
age_splines <- rcs(dummy_data$age, FGR$splines$age_knots)
creatinine_splines <- rcs(dummy_data$creatinine, FGR$splines$creatinine_knots)
Hb_A1C_splines <- rcs(dummy_data$Hb_A1C, FGR$splines$hba1c_knots)
albumin_splines <- rcs(dummy_data$albumin, FGR$splines$albumin_knots)
# add non-linear components to new_data
dummy_data$age1 <- age_splines[, 2]
dummy_data$age2 <- age_splines[, 3]
dummy_data$creatinine1 <- creatinine_splines[, 2]
dummy_data$creatinine2 <- creatinine_splines[, 3]
dummy_data$Hb_A1C1 <- Hb_A1C_splines[, 2]
dummy_data$Hb_A1C2 <- Hb_A1C_splines[, 3]
dummy_data$albumin1 <- albumin_splines[, 2]
attr(terms(form), "term.labels")
# Ensure the column order matches the order in coefs
X <- model.matrix(, data = dummy_data)[, -1]  # remove intercept
# Ensure the column order matches the order in coefs
X <- model.matrix(FGR$form, data = dummy_data)[, -1]  # remove intercept
form
# Ensure the column order matches the order in coefs
X <- model.matrix(as.formular("~ age + sex_f + elective_adm + homelessness +
peripheral_AD + coronary_AD + stroke + CHF + hypertension +
COPD + CKD + malignancy + mental_illness + creatinine + Hb_A1C +
albumin + Hb_A1C_missing + creatinine_missing + albumin_missing +
age1 + age2 + creatinine1 + creatinine2 + albumin1 + Hb_A1C1 +
Hb_A1C2"), data = dummy_data)[, -1]  # remove intercept
# Ensure the column order matches the order in coefs
X <- model.matrix(as.formula("~ age + sex_f + elective_adm + homelessness +
peripheral_AD + coronary_AD + stroke + CHF + hypertension +
COPD + CKD + malignancy + mental_illness + creatinine + Hb_A1C +
albumin + Hb_A1C_missing + creatinine_missing + albumin_missing +
age1 + age2 + creatinine1 + creatinine2 + albumin1 + Hb_A1C1 +
Hb_A1C2"), data = dummy_data)[, -1]  # remove intercept
lp <- as.vector(X %*% coefs[1:3])  # linear predictor
lp <- as.vector(X %*% coefs)  # linear predictor
# arbitrary baseline
# get baseline hazard = hazard when all covariates are at 0
baseline_hazard <- 0.01
# Assume exponential baseline subdistribution hazard
# Simulated event times based on subdistribution hazard
time <- -log(runif(n)) / (baseline_hazard * exp(lp))
# Simulated event indicator (e.g., cause 1 vs. censoring)
status <- rbinom(n, size = 1, prob = 0.8)  # 80% events, 20% censored
dummy_data$time <- time
dummy_data$status <- status
View(dummy_data)
library(prodlim)
library(survival)
library(riskRegression)
library(data.table)
library(truncnorm)
library(rms)
# load model object
FGR <- readRDS("../models/final_FGR_clean.rds")
coefs <- FGR$crrFit$coef
set.seed(99)
n <- 1000  # number of dummy observations
# Example covariates
dummy_data <- data.table(
patient_id = seq(1, n, 1),
age = rtruncnorm(n = n, a = 18, b = 105, mean = 70, sd = 15),
sex_f = as.logical(rbinom(n, size = 1, prob = 0.5)),
elective_adm = as.logical(rbinom(n, size = 1, prob = 0.02)),
homelessness = as.logical(rbinom(n, size = 1, prob = 0.005)),
peripheral_AD = as.logical(rbinom(n, size = 1, prob = 0.01)),
coronary_AD = as.logical(rbinom(n, size = 1, prob = 0.12)),
stroke = as.logical(rbinom(n, size = 1, prob = 0.05)),
CHF = as.logical(rbinom(n, size = 1, prob = 0.13)),
hypertension = as.logical(rbinom(n, size = 1, prob = 0.45)),
COPD = as.logical(rbinom(n, size = 1, prob = 0.06)),
CKD = as.logical(rbinom(n, size = 1, prob = 0.04)),
malignancy = as.logical(rbinom(n, size = 1, prob = 0.11)),
mental_illness = as.logical(rbinom(n, size = 1, prob = 0.07)),
creatinine = rtruncnorm(n = n, a = 1, b = 1000, mean = 30, sd = 20),
Hb_A1C = rtruncnorm(n = n, a = 5, b = 15, mean = 7.4, sd = 2),
albumin = rtruncnorm(n = n, a = 10, b = 100, mean = 30, sd = 10),
Hb_A1C_missing = as.logical(rbinom(n, size = 1, prob = 0.6)),
creatinine_missing = as.logical(rbinom(n, size = 1, prob = 0.07)),
albumin_missing = as.logical(rbinom(n, size = 1, prob = 0.02))
)
# for entries with missing lab data, set lab result to 0 (according to imputation method)
dummy_data[Hb_A1C_missing == TRUE, Hb_A1C := 0]
dummy_data[creatinine_missing == TRUE, creatinine := 0]
dummy_data[albumin_missing == TRUE, albumin := 0]
# add non-linear components
age_splines <- rcs(dummy_data$age, FGR$splines$age_knots)
creatinine_splines <- rcs(dummy_data$creatinine, FGR$splines$creatinine_knots)
Hb_A1C_splines <- rcs(dummy_data$Hb_A1C, FGR$splines$hba1c_knots)
albumin_splines <- rcs(dummy_data$albumin, FGR$splines$albumin_knots)
# add non-linear components to new_data
dummy_data[age1 := age_splines[, 2]]
dummy_data[age2 := age_splines[, 3]]
# add non-linear components to new_data
dummy_data[, age1 := age_splines[, 2]]
dummy_data[, age2 := age_splines[, 3]]
dummy_data[, creatinine1 := creatinine_splines[, 2]]
dummy_data[, creatinine2 := creatinine_splines[, 3]]
dummy_data[, albumin1 := albumin_splines[, 2]]
dummy_data[, Hb_A1C1 := Hb_A1C_splines[, 2]]
dummy_data[, Hb_A1C2 := Hb_A1C_splines[, 3]]
attr(terms(form), "term.labels")
attr(terms(FGR$form), "term.labels")
colnames(dummy_data)
# Example covariates
dummy_data <- data.table(
age = rtruncnorm(n = n, a = 18, b = 105, mean = 70, sd = 15),
sex_f = as.logical(rbinom(n, size = 1, prob = 0.5)),
elective_adm = as.logical(rbinom(n, size = 1, prob = 0.02)),
homelessness = as.logical(rbinom(n, size = 1, prob = 0.005)),
peripheral_AD = as.logical(rbinom(n, size = 1, prob = 0.01)),
coronary_AD = as.logical(rbinom(n, size = 1, prob = 0.12)),
stroke = as.logical(rbinom(n, size = 1, prob = 0.05)),
CHF = as.logical(rbinom(n, size = 1, prob = 0.13)),
hypertension = as.logical(rbinom(n, size = 1, prob = 0.45)),
COPD = as.logical(rbinom(n, size = 1, prob = 0.06)),
CKD = as.logical(rbinom(n, size = 1, prob = 0.04)),
malignancy = as.logical(rbinom(n, size = 1, prob = 0.11)),
mental_illness = as.logical(rbinom(n, size = 1, prob = 0.07)),
creatinine = rtruncnorm(n = n, a = 1, b = 1000, mean = 30, sd = 20),
Hb_A1C = rtruncnorm(n = n, a = 5, b = 15, mean = 7.4, sd = 2),
albumin = rtruncnorm(n = n, a = 10, b = 100, mean = 30, sd = 10),
Hb_A1C_missing = as.logical(rbinom(n, size = 1, prob = 0.6)),
creatinine_missing = as.logical(rbinom(n, size = 1, prob = 0.07)),
albumin_missing = as.logical(rbinom(n, size = 1, prob = 0.02))
)
# for entries with missing lab data, set lab result to 0 (according to imputation method)
dummy_data[Hb_A1C_missing == TRUE, Hb_A1C := 0]
dummy_data[creatinine_missing == TRUE, creatinine := 0]
dummy_data[albumin_missing == TRUE, albumin := 0]
# add non-linear components
age_splines <- rcs(dummy_data$age, FGR$splines$age_knots)
creatinine_splines <- rcs(dummy_data$creatinine, FGR$splines$creatinine_knots)
Hb_A1C_splines <- rcs(dummy_data$Hb_A1C, FGR$splines$hba1c_knots)
albumin_splines <- rcs(dummy_data$albumin, FGR$splines$albumin_knots)
# add non-linear components to new_data
dummy_data[, age1 := age_splines[, 2]]
dummy_data[, age2 := age_splines[, 3]]
dummy_data[, creatinine1 := creatinine_splines[, 2]]
dummy_data[, creatinine2 := creatinine_splines[, 3]]
dummy_data[, albumin1 := albumin_splines[, 2]]
dummy_data[, Hb_A1C1 := Hb_A1C_splines[, 2]]
dummy_data[, Hb_A1C2 := Hb_A1C_splines[, 3]]
attr(terms(FGR$form), "term.labels")
colnames(dummy_data)
# Ensure the column order matches the order in coefs
X <- model.matrix(as.formula("~ age + sex_f + elective_adm + homelessness +
peripheral_AD + coronary_AD + stroke + CHF + hypertension +
COPD + CKD + malignancy + mental_illness + creatinine + Hb_A1C +
albumin + Hb_A1C_missing + creatinine_missing + albumin_missing +
age1 + age2 + creatinine1 + creatinine2 + albumin1 + Hb_A1C1 +
Hb_A1C2"), data = dummy_data)[, -1]  # remove intercept
lp <- as.vector(X %*% coefs)  # linear predictor
# arbitrary baseline
# get baseline hazard = hazard when all covariates are at 0
baseline_hazard <- 0.01
# Assume exponential baseline subdistribution hazard
# Simulated event times based on subdistribution hazard
time <- -log(runif(n)) / (baseline_hazard * exp(lp))
# Simulated event indicator (e.g., cause 1 vs. censoring)
status <- rbinom(n, size = 1, prob = 0.8)  # 80% events, 20% censored
dummy_data$time <- time
dummy_data$status <- status
View(dummy_data)
#library(riskRegression)
library(data.table)
library(truncnorm)
library(rms)
# load model object
FGR <- readRDS("../models/final_FGR_clean.rds")
coefs <- FGR$crrFit$coef
set.seed(99)
n <- 1000  # number of dummy observations
# Example covariates
dummy_data <- data.table(
age = rtruncnorm(n = n, a = 18, b = 105, mean = 70, sd = 15),
sex_f = as.logical(rbinom(n, size = 1, prob = 0.5)),
elective_adm = as.logical(rbinom(n, size = 1, prob = 0.02)),
homelessness = as.logical(rbinom(n, size = 1, prob = 0.005)),
peripheral_AD = as.logical(rbinom(n, size = 1, prob = 0.01)),
coronary_AD = as.logical(rbinom(n, size = 1, prob = 0.12)),
stroke = as.logical(rbinom(n, size = 1, prob = 0.05)),
CHF = as.logical(rbinom(n, size = 1, prob = 0.13)),
hypertension = as.logical(rbinom(n, size = 1, prob = 0.45)),
COPD = as.logical(rbinom(n, size = 1, prob = 0.06)),
CKD = as.logical(rbinom(n, size = 1, prob = 0.04)),
malignancy = as.logical(rbinom(n, size = 1, prob = 0.11)),
mental_illness = as.logical(rbinom(n, size = 1, prob = 0.07)),
creatinine = rtruncnorm(n = n, a = 1, b = 1000, mean = 30, sd = 20),
Hb_A1C = rtruncnorm(n = n, a = 5, b = 15, mean = 7.4, sd = 2),
albumin = rtruncnorm(n = n, a = 10, b = 100, mean = 30, sd = 10),
Hb_A1C_missing = as.logical(rbinom(n, size = 1, prob = 0.6)),
creatinine_missing = as.logical(rbinom(n, size = 1, prob = 0.07)),
albumin_missing = as.logical(rbinom(n, size = 1, prob = 0.02))
)
# for entries with missing lab data, set lab result to 0 (according to imputation method)
dummy_data[Hb_A1C_missing == TRUE, Hb_A1C := 0]
dummy_data[creatinine_missing == TRUE, creatinine := 0]
dummy_data[albumin_missing == TRUE, albumin := 0]
# add non-linear components
age_splines <- rcs(dummy_data$age, FGR$splines$age_knots)
creatinine_splines <- rcs(dummy_data$creatinine, FGR$splines$creatinine_knots)
Hb_A1C_splines <- rcs(dummy_data$Hb_A1C, FGR$splines$hba1c_knots)
albumin_splines <- rcs(dummy_data$albumin, FGR$splines$albumin_knots)
# add non-linear components to new_data
dummy_data[, age1 := age_splines[, 2]]
dummy_data[, age2 := age_splines[, 3]]
dummy_data[, creatinine1 := creatinine_splines[, 2]]
dummy_data[, creatinine2 := creatinine_splines[, 3]]
dummy_data[, albumin1 := albumin_splines[, 2]]
dummy_data[, Hb_A1C1 := Hb_A1C_splines[, 2]]
dummy_data[, Hb_A1C2 := Hb_A1C_splines[, 3]]
# Ensure the column order matches the order in coefs
#attr(terms(FGR$form), "term.labels")
X <- model.matrix(as.formula("~ age + sex_f + elective_adm + homelessness +
peripheral_AD + coronary_AD + stroke + CHF + hypertension +
COPD + CKD + malignancy + mental_illness + creatinine + Hb_A1C +
albumin + Hb_A1C_missing + creatinine_missing + albumin_missing +
age1 + age2 + creatinine1 + creatinine2 + albumin1 + Hb_A1C1 +
Hb_A1C2"), data = dummy_data)[, -1]  # remove intercept
lp <- as.vector(X %*% coefs)  # linear predictor
# Simulate baseline survival times for event of interest and competing event
t1 <- -log(runif(n)) / (0.03 * exp(lp)) # event 1 = foot complication
t2 <- -log(runif(n)) / (0.1 * exp(lp)) # event 2 = death
event_time <- pmin(t1, t2)
# Determine event status (1 for event of interest, 2 for competing event)
event_status <- ifelse(t1 < t2, 1, 2)
1-0.1-0.03
# simulate censoring times and add them to the event times
censoring_rate <- 0.87
censoring_time <- rexp(n, censoring_rate)
observed_time <- pmin(event_time, censoring_time)
# Update event status (0 for censored)
event_status <- ifelse(observed_time == censoring_time, 0, event_status)
dummy_data$time <- event_time
dummy_data$status <- event_status
View(dummy_data)
sum(dummy_data$status)
check <- dummy_data %>% group_by(status) %>% summarize(N = n())
library(dplyr)
check <- dummy_data %>% group_by(status) %>% summarize(N = n())
View(check)
